// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Company {
  id String @id @default(uuid())
  cnpj String
  type String
  social_name String
  comercial_email String
  user_id String @unique
  user User @relation(fields: [user_id], references: [id])
  freight_registers FreightRegister[]

  @@map("company")
}

model User {
  id String @id @default(uuid())
  name String
  email String
  tel String
  password String
  resetPasswordToken String
  resetPasswordExpires DateTime
  profile_type String
  company_users Company?
  delivery_person_users DeliveryPerson?
  notifications Notifications[]
  created_at DateTime @default(now())
  updated_at DateTime

  @@map("users")
}

model DeliveryPerson {
  id String @id @default(uuid())
  cpf String
  cnh String
  bank String
  account_number String
  account_type String
  user_id String @unique
  user User @relation(fields: [user_id], references: [id])
  freight_registers FreightRequest[]
  vehicle_registers VehicleRegistration[]

  @@map("delivery_person")
}

model Vehicle {
  id String @id @default(uuid())
  vehicle_type String
  name String
  owner String
  document String
  plate String
  color String
  model String
  brand String
  year Int
  classif_weight Int
  vehicle_registers VehicleRegistration?

  @@map("vehicle")

}

model Freight {
  id String @id @default(uuid())
  name String
  description String
  min_weight Int
  distance Int
  tax Float
  value Float
  fragile Boolean
  extra_observation String
  total_value Float
  status_request String
  status_shipping String
  freight_registers FreightRegister?
  address Address?

  @@map("freight")
}

model FreightRegister {
  id String @id @default(uuid())
  freight_id String @unique
  freight Freight @relation(fields: [freight_id], references: [id])
  company_id String
  company Company @relation(fields: [company_id], references: [id])
  freight_requests FreightRequest?
  created_at DateTime @default(now())
  
  @@map("freight_registration")
}

model FreightRequest {
  id String @id @default(uuid())
  delivery_person_id String
  delivery_person DeliveryPerson @relation(fields: [delivery_person_id], references: [id])
  vehicle_register_id String
  vehicle_register VehicleRegistration @relation(fields: [vehicle_register_id], references: [id])
  freight_register_id String @unique
  freight_register FreightRegister @relation(fields: [freight_register_id], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime

  @@map("freight_request")
}

model VehicleRegistration {
  id String @id @default(uuid())
  delivery_person_id String
  delivery_person DeliveryPerson @relation(fields: [delivery_person_id], references: [id])
  vehicle_id String @unique
  vehicle Vehicle @relation(fields: [vehicle_id], references: [id])
  freight_requests FreightRequest[]
  created_at DateTime @default(now())
  updated_at DateTime

  @@map("vehicle_registration")
}

model Notifications {
  id Int @id @default(autoincrement())
  title String
  message String
  image String
  user_id String
  user User @relation(fields: [user_id], references: [id])
  created_at DateTime @default(now())

  @@map("notifications")
}

model Address {
  id String @id @default(uuid())
  zipcode String
  street String
  address_number String
  complement String
  neighborhood String
  city String
  state String
  freight_id String @unique
  freight Freight @relation(fields: [freight_id], references: [id])

   @@map("address")
}